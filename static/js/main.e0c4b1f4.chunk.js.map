{"version":3,"sources":["editorContext.js","components/code-editor.js","components/preview.js","components/resizable.js","components/code-cell.js","index.js"],"names":["defaultContext","markdownText","setMarkdownText","React","createContext","CodeEditor","useContext","editorContext","className","id","onChange","event","preventDefault","newValue","currentTarget","value","Preview","marked","setOptions","breaks","highlight","code","Prism","languages","javascript","renderer","Renderer","link","href","title","text","dangerouslySetInnerHTML","__html","Resizable","resizableProps","direction","children","useState","window","innerHeight","setInnerHeight","innerWidth","setInnerWidth","width","setWidth","useEffect","timer","listener","clearTimeout","setTimeout","addEventListener","removeEventListener","minConstraints","Infinity","maxConstraints","height","resizeHandles","onResizeStop","data","size","CodeCell","contextValue","Provider","style","display","flexDirection","App","ReactDOM","render","document","querySelector"],"mappings":"+TAEMA,EAAiB,CACrBC,aAAc,GACdC,gBAAiB,cAGJC,E,OAAAA,EAAMC,cAAcJ,G,qBC6DpBK,EAnBI,WAAO,IAChBH,EAAoBI,qBAAWC,GAA/BL,gBAQR,OACE,sBAAKM,UAAU,iBAAf,UACE,oBAAIA,UAAU,2CAAd,oBACA,0BAAUC,GAAG,SAASC,SATF,SAACC,GACvBA,EAAMC,iBACN,IAAMC,EAAWF,EAAMG,cAAcC,MACrCb,EAAgBW,IAMd,SAxDS,6pC,+BC8BAG,EA7BC,WAAO,IACbf,EAAiBK,qBAAWC,GAA5BN,aAERgB,SAAOC,WAAW,CAChBC,QAAQ,EACRC,UAAW,SAAUC,GACnB,OAAOC,IAAMF,UAAUC,EAAMC,IAAMC,UAAUC,WAAY,iBAI7D,IAAMC,EAAW,IAAIR,SAAOS,SAK5B,OAJAD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAM,4BAAN,OAAmCF,EAAnC,aAA4CE,EAA5C,SAIA,sBAAKtB,UAAU,kBAAf,UACE,oBAAIA,UAAU,2CAAd,uBACA,qBACEA,UAAU,WACVuB,wBAAyB,CACvBC,OAAQf,iBAAOhB,EAAc,CAAEwB,SAAUA,KAE3ChB,GAAG,gB,wBC2BIwB,EApDG,SAAC,GAA6B,IAC1CC,EADeC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAAe,EAEPC,mBAASC,OAAOC,aAFT,mBAEtCA,EAFsC,KAEzBC,EAFyB,OAGTH,mBAASC,OAAOG,YAHP,mBAGtCA,EAHsC,KAG1BC,EAH0B,OAInBL,mBAA6B,IAApBC,OAAOG,YAJG,mBAItCE,EAJsC,KAI/BC,EAJ+B,KAiD7C,OA3CAC,qBAAU,WACR,IAAIC,EACEC,EAAW,WACXD,GACFE,aAAaF,GAEfA,EAAQG,YAAW,WACjBT,EAAeF,OAAOC,aACtBG,EAAcJ,OAAOG,YACG,IAApBH,OAAOG,WAAoBE,GAC7BC,EAA6B,IAApBN,OAAOG,cAEjB,MAIL,OAFAH,OAAOY,iBAAiB,SAAUH,GAE3B,WACLT,OAAOa,oBAAoB,SAAUJ,MAEtC,CAACJ,IAGFT,EADgB,eAAdC,EACe,CACf3B,UAAW,oBACX4C,eAAgB,CAAc,GAAbX,EAAkBY,KACnCC,eAAgB,CAAc,IAAbb,EAAmBY,KACpCE,OAAQF,IACRV,QACAa,cAAe,CAAC,KAChBC,aAAc,SAAC9C,EAAO+C,GACpBd,EAASc,EAAKC,KAAKhB,SAIN,CACfS,eAAgB,CAACC,IAAU,IAC3BC,eAAgB,CAACD,IAAwB,GAAdd,GAC3BgB,OAAQ,IACRZ,MAAOU,IACPG,cAAe,CAAC,MAIb,cAAC,eAAD,2BAAkBtB,GAAlB,aAAmCE,MCb7BwB,EAjCE,WAAO,IAAD,EACmBvB,mBAAS,IAD5B,mBAGfwB,EAAe,CACnB5D,aAJmB,KAKnBC,gBALmB,MAQrB,OACE,cAAC,EAAc4D,SAAf,CAAwB/C,MAAO8C,EAA/B,SACE,qBAAKrD,UAAU,YAAf,SACE,cAAC,EAAD,CAAW2B,UAAU,WAArB,SACE,sBACE4B,MAAO,CACLR,OAAQ,oBACRS,QAAS,OACTC,cAAe,OAJnB,UAOE,cAAC,EAAD,CAAW9B,UAAU,aAArB,SACE,cAAC,EAAD,MAGF,qBAAK3B,UAAU,mBAAf,SACE,cAAC,EAAD,gBC1BR0D,EAAM,WACV,OACE,8BACE,cAAC,EAAD,OAKNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.e0c4b1f4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst defaultContext = {\r\n  markdownText: \"\",\r\n  setMarkdownText: () => {},\r\n};\r\n\r\nexport default React.createContext(defaultContext);\r\n","import { useContext } from \"react\";\r\nimport editorContext from \"../editorContext\";\r\nimport \"./code-editor.css\";\r\nimport \"./syntax.css\";\r\n\r\nconst startText = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`;\r\n\r\nconst CodeEditor = () => {\r\n  const { setMarkdownText } = useContext(editorContext);\r\n\r\n  const onChangeHandler = (event) => {\r\n    event.preventDefault();\r\n    const newValue = event.currentTarget.value;\r\n    setMarkdownText(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"editor-wrapper\">\r\n      <h1 className=\"button button-format is-primary is-small\">Editor</h1>\r\n      <textarea id=\"editor\" onChange={onChangeHandler}>\r\n        {startText}\r\n      </textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;\r\n","import \"./preview.css\";\r\nimport { useContext } from \"react\";\r\nimport editorContext from \"../editorContext\";\r\nimport { marked } from \"marked\";\r\nimport Prism from \"prismjs\";\r\n\r\nconst Preview = () => {\r\n  const { markdownText } = useContext(editorContext);\r\n\r\n  marked.setOptions({\r\n    breaks: true,\r\n    highlight: function (code) {\r\n      return Prism.highlight(code, Prism.languages.javascript, \"javascript\");\r\n    },\r\n  });\r\n\r\n  const renderer = new marked.Renderer();\r\n  renderer.link = function (href, title, text) {\r\n    return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"preview-wrapper\">\r\n      <h1 className=\"button button-format is-primary is-small\">Previewer</h1>\r\n      <div\r\n        className=\"markdown\"\r\n        dangerouslySetInnerHTML={{\r\n          __html: marked(markdownText, { renderer: renderer }),\r\n        }}\r\n        id=\"preview\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import \"./resizable.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ResizableBox } from \"react-resizable\";\r\n\r\nconst Resizable = ({ direction, children }) => {\r\n  let resizableProps;\r\n  const [innerHeight, setInnerHeight] = useState(window.innerHeight);\r\n  const [innerWidth, setInnerWidth] = useState(window.innerWidth);\r\n  const [width, setWidth] = useState(window.innerWidth * 0.75);\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    const listener = () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n      timer = setTimeout(() => {\r\n        setInnerHeight(window.innerHeight);\r\n        setInnerWidth(window.innerWidth);\r\n        if (window.innerWidth * 0.75 < width) {\r\n          setWidth(window.innerWidth * 0.75);\r\n        }\r\n      }, 100);\r\n    };\r\n    window.addEventListener(\"resize\", listener);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", listener);\r\n    };\r\n  }, [width]);\r\n\r\n  if (direction === \"horizontal\") {\r\n    resizableProps = {\r\n      className: \"resize-horizontal\",\r\n      minConstraints: [innerWidth * 0.2, Infinity],\r\n      maxConstraints: [innerWidth * 0.75, Infinity],\r\n      height: Infinity,\r\n      width,\r\n      resizeHandles: [\"e\"],\r\n      onResizeStop: (event, data) => {\r\n        setWidth(data.size.width);\r\n      },\r\n    };\r\n  } else {\r\n    resizableProps = {\r\n      minConstraints: [Infinity, 24],\r\n      maxConstraints: [Infinity, innerHeight * 0.9],\r\n      height: 800,\r\n      width: Infinity,\r\n      resizeHandles: [\"s\"],\r\n    };\r\n  }\r\n\r\n  return <ResizableBox {...resizableProps}>{children}</ResizableBox>;\r\n};\r\n\r\nexport default Resizable;\r\n","import \"./code-cell.css\";\r\nimport { useState } from \"react\";\r\nimport CodeEditor from \"./code-editor\";\r\nimport Preview from \"./preview\";\r\nimport Resizable from \"./resizable\";\r\nimport EditorContext from \"../editorContext\";\r\n\r\nconst CodeCell = () => {\r\n  const [markdownText, setMarkdownText] = useState(\"\");\r\n\r\n  const contextValue = {\r\n    markdownText,\r\n    setMarkdownText,\r\n  };\r\n\r\n  return (\r\n    <EditorContext.Provider value={contextValue}>\r\n      <div className=\"container\">\r\n        <Resizable direction=\"vertical\">\r\n          <div\r\n            style={{\r\n              height: \"calc(100% - 10px)\",\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n            }}\r\n          >\r\n            <Resizable direction=\"horizontal\">\r\n              <CodeEditor />\r\n            </Resizable>\r\n\r\n            <div className=\"progress-wrapper\">\r\n              <Preview />\r\n            </div>\r\n          </div>\r\n        </Resizable>\r\n      </div>\r\n    </EditorContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CodeCell;\r\n","import \"bulmaswatch/superhero/bulmaswatch.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport ReactDOM from \"react-dom\";\nimport CodeCell from \"./components/code-cell\";\n\nconst App = () => {\n  return (\n    <div>\n      <CodeCell />\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}